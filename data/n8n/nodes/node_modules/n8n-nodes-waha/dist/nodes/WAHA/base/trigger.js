"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeWebhookForEvents = exports.makeEventNote = exports.CONFIGURE_WEBHOOK_NOTE = exports.TRIGGER_DESCRIPTION = exports.BASE_TRIGGER_DESCRIPTION = void 0;
exports.BASE_TRIGGER_DESCRIPTION = {
    displayName: 'WAHA Trigger',
    name: 'wahaTrigger',
    icon: 'file:waha.svg',
    group: ['trigger'],
    description: 'Handle WAHA events via webhooks',
};
exports.TRIGGER_DESCRIPTION = {
    defaults: {
        name: 'WAHA Trigger',
    },
    inputs: [],
    credentials: [],
    webhooks: [
        {
            name: 'default',
            httpMethod: 'POST',
            responseMode: 'onReceived',
            path: 'waha',
        },
    ],
};
exports.CONFIGURE_WEBHOOK_NOTE = {
    displayName: 'Remember to configure WAHA instance (session or server) to send events to <b>Webhook URL</b>. ' +
        '<br/>Check <b>Docs</b> link above☝️',
    name: 'operation',
    type: 'notice',
    typeOptions: {
        theme: 'info',
    },
    default: '',
};
function noteText(events) {
    const parts = ['<b>Events</b>:'];
    for (const event of events) {
        parts.push(`- ${event}`);
    }
    return parts.join('<br>');
}
function makeEventNote(events) {
    return {
        displayName: noteText(events),
        name: 'operation',
        type: 'notice',
        typeOptions: {
            theme: 'info',
        },
        default: '',
    };
}
exports.makeEventNote = makeEventNote;
function makeWebhookForEvents(events) {
    async function webhook() {
        const bodyData = this.getBodyData();
        const eventType = bodyData.event;
        if (eventType === undefined || !events.includes(eventType)) {
            return {};
        }
        const eventIndex = events.indexOf(eventType);
        const req = this.getRequestObject();
        const data = this.helpers.returnJsonArray(req.body);
        const empty = [];
        const workflowData = events.map((_) => empty);
        workflowData[eventIndex] = data;
        return {
            workflowData: workflowData,
        };
    }
    return webhook;
}
exports.makeWebhookForEvents = makeWebhookForEvents;
//# sourceMappingURL=trigger.js.map